@import '../../config/mixins';
@import '../../config/backgrounds';
@import '../../config/layout';
@import '../../config/inputs';

$popover-arrow-size: get-spacing('l');

input.input,
textarea.input {
  @include input();
}

input[type='number'] {
  -moz-appearance: textfield;
}
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

@each $key, $size in $input-size-map {
  .size-#{$key} {
    .input {
      @include input-shape($key);
    }

    textarea.input {
      height: auto;
    }

    &.with-icon {
      .input {
        padding-right: map-get($input-size-map, $key);
      }
    }

    .status-icon {
      right: get-input-horizontal-padding($key);
    }
  }
}

.holder {
  position: relative;
  .input {
    animation: shake 0.3s linear;
    animation-iteration-count: 0;
  }

  &.flash-error {
    .input {
      animation-iteration-count: infinite;
    }
  }
}

@each $theme in $input-theme-names {
  @if $theme != 'default' {
    .theme-#{$theme} {
      .input {
        @include input-theme($theme);
      }
    }
  }
}

.disabled {
  @each $theme in $input-theme-names {
    &.theme-#{$theme} {
      .input {
        @include input-disabled($theme);
      }
    }
  }
}

.clickable {
  .input {
    cursor: pointer;
  }
}

.error {
  position: absolute;
  left: 0;
  top: 0;
  opacity: 1;
  width: 100%;
  transform: translateY(-100%);
  transition: opacity 0.25s cubic-bezier(0.78, 0.14, 0.15, 0.86) 0s;
  text-align: left;
  overflow: visible;

  .error-content {
    position: absolute;
    bottom: get-spacing('s') + get-spacing('s');
  }

  &:before {
    @include background('white');
    content: '';
    position: absolute;
    display: block;
    bottom: get-spacing('s');
    left: get-spacing('m') + ($popover-arrow-size / 2);
    width: $popover-arrow-size;
    height: $popover-arrow-size;
    transform: rotate(45deg);
    box-shadow: 1px 2px 4px -1px rgba(0, 0, 0, 0.1);
    z-index: 1;
  }

  &.hide {
    opacity: 0;
    overflow: hidden;
  }
}

.status-icon {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  color: get-color('secondary-light');
  line-height: 0;

  &.clickable {
    cursor: pointer;
  }
}

@each $status, $color-name in $input-status-color-map {
  .status-#{$status} {
    @each $theme in $input-theme-names {
      &.theme-#{$theme} {
        .input {
          @include input-status($status, $theme);
        }
      }
    }
  }
}
